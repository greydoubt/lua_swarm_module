-- This basically has an object act as an AFK/async marker that updates the data store when a player touches the object
-- uses: mailbox, force field, alert system, aynsc games (death stranding type game)

local DataStoreService = game:GetService("DataStoreService")
local entryStore = DataStoreService:GetDataStore("PlayerEntries") -- The DataStore for area entries

local PlayersService = game:GetService('Players')
local DebrisService = game:GetService('Debris')

-- Constants for area detection and shot behavior
local AREA_KEY = "MyArea"  -- Change this to represent the key for your area in the DataStore
local SHOT_SPEED = 100
local SHOT_TIME = 1
local NOZZLE_OFFSET = Vector3.new(0, 0.4, -1.1)
local DEBOUNCE_TAG_NAME = 'Busy'

-- Other variables and objects
local Tool = script.Parent
local Handle = Tool:WaitForChild('Handle')
local FireSound = Handle:WaitForChild('Fire')
local ReloadSound = Handle:WaitForChild('Reload')
local HitFadeSound = script:WaitForChild('HitFade')
local PointLight = Handle:WaitForChild('PointLight')
local Character = nil
local Humanoid = nil
local Player = nil
local BaseShot = nil

-----------------
--| Functions |--
-----------------

-- Save the player's name and the current time to the DataStore when they enter the area
local function UpdateDataStore(playerName, areaKey)
    local success, errorMessage = pcall(function()
        local entryTime = os.time() -- Current time as UNIX timestamp
        entryStore:SetAsync(areaKey, {playerName = playerName, time = entryTime})
    end)

    if success then
        print(playerName .. " entered area: " .. areaKey .. " at time: " .. os.date("%X", os.time()))
    else
        warn("Failed to update DataStore: " .. errorMessage)
    end
end

-- Called when the player enters a specific area
local function OnPlayerEnterArea(hit)
    local character = hit.Parent
    local player = PlayersService:GetPlayerFromCharacter(character)

    if player then
        UpdateDataStore(player.Name, AREA_KEY)
    end
end

-- Other existing functions, such as Dematerialize, FindCharacterAncestor, ApplyTags, etc.
-- (These functions are unchanged but included in the script.)

-- Detect when the tool is equipped by a player
local function OnEquipped()
    Character = Tool.Parent
    Humanoid = Character:WaitForChild('Humanoid')
    Player = PlayersService:GetPlayerFromCharacter(Character)
end

-- Handle activation and shooting logic
local function OnActivated(hit)
    if Tool.Enabled and Humanoid.Health > 0 then
        Tool.Enabled = false

        for i = 1, 3 do
            FireSound:Play()

            local handleCFrame = Handle.CFrame
            local firingPoint = handleCFrame.p + handleCFrame:vectorToWorldSpace(NOZZLE_OFFSET)
            local shotCFrame = CFrame.new(firingPoint, hit)

            local laserShotClone = BaseShot:Clone()
            laserShotClone.CFrame = shotCFrame + (shotCFrame.lookVector * (BaseShot.Size.Z / 2))
            local bodyVelocity = Instance.new('BodyVelocity')
            bodyVelocity.velocity = shotCFrame.lookVector * SHOT_SPEED
            bodyVelocity.Parent = laserShotClone
            laserShotClone.Touched:Connect(function(otherPart)
                OnTouched(laserShotClone, otherPart)
            end)
            DebrisService:AddItem(laserShotClone, SHOT_TIME)
            laserShotClone.Parent = workspace

            wait(0.15)
        end
        wait(0.6) -- FireSound length

        ReloadSound:Play()
        wait(0.75) -- ReloadSound length

        Tool.Enabled = true
    end
end

-- Called when the tool is unequipped
local function OnUnequipped()
    -- Your logic when the tool is unequipped (if needed)
end

--------------------
--| Script Logic |--
--------------------

BaseShot = Instance.new('Part')
BaseShot.Name = 'Effect'
BaseShot.FormFactor = Enum.FormFactor.Custom
BaseShot.Size = Vector3.new(0.2, 0.2, 3)
BaseShot.CanCollide = false
BaseShot.BrickColor = BrickColor.new('Toothpaste')
